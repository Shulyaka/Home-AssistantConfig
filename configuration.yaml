
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml

http:
  use_x_forwarded_for: true
  trusted_proxies: 127.0.0.1
  server_host: 127.0.0.1
  base_url: https://shulyaka.org.ru
  cors_allowed_origins: https://shulyaka.org.ru

recorder:
  db_url: mysql+pymysql://@/hass_db?unix_socket=/var/run/mysql/mysql.sock&charset=utf8

logger:
  default: info

google_assistant:
  project_id: home-assistant-1404b
  api_key: !secret google_assistant

notify:
  - platform: html5
    name: html5
    vapid_pub_key: BA0ufUCAkPCSdEJBl2sStgZNOQicKJyEZnlTZvgPEOVG4HkJrafP7IcWHa-OSOON0EAAEUa9YoDqpPA-N3OCYVU
    vapid_prv_key: !secret web_push
    vapid_email: Shulyaka@gmail.com
  - platform: syslog
    name: syslog

shell_command:
  hassd_update: /usr/lib/hassd/hassd_update.sh

zha:
  usb_path: /dev/ttyS1
  database_path: /srv/hass/zigbee.db
  radio_type: xbee
  baudrate: 9600

sensor:
  - platform: rest
    resource: http://watercounter/cgi-bin/wcounter.sh
    name: wcounter
    value_template: 'Available'
    device_class: signal_strength
    json_attributes: counters
  - platform: template
    sensors:
      counter_0:
        friendly_name_template: "{{states.sensor.wcounter.attributes.counters[0].name.capitalize()}} counter"
        unit_of_measurement: 'm³'
        value_template: "{{'%.3f'|format(states.sensor.wcounter.attributes.counters[0].value/1000)}}"
        attribute_templates:
          serial: "{{states.sensor.wcounter.attributes.counters[0].serial}}"
          state: "{{'%d%%'|format(states.sensor.wcounter.attributes.counters[0].state*100/15)}}"
          lastaction: "{{states.sensor.wcounter.attributes.counters[0].lastaction}}"
      counter_1:
        friendly_name_template: "{{states.sensor.wcounter.attributes.counters[1].name.capitalize()}} counter"
        unit_of_measurement: 'm³'
        value_template: "{{'%.3f'|format(states.sensor.wcounter.attributes.counters[1].value/1000)}}"
        attribute_templates:
          serial: "{{states.sensor.wcounter.attributes.counters[1].serial}}"
          state: "{{'%d%%'|format(states.sensor.wcounter.attributes.counters[1].state*100/15)}}"
          lastaction: "{{states.sensor.wcounter.attributes.counters[1].lastaction}}"
      counter_2:
        friendly_name_template: "{{states.sensor.wcounter.attributes.counters[2].name.capitalize()}} counter"
        unit_of_measurement: 'm³'
        value_template: "{{'%.3f'|format(states.sensor.wcounter.attributes.counters[2].value/1000)}}"
        attribute_templates:
          serial: "{{states.sensor.wcounter.attributes.counters[2].serial}}"
          state: "{{'%d%%'|format(states.sensor.wcounter.attributes.counters[2].state*100/15)}}"
          lastaction: "{{states.sensor.wcounter.attributes.counters[2].lastaction}}"

switch:
  - platform: rest
    resource: http://watercounter/cgi-bin/wcontrol.sh?valve=hot
    name: Hot water
    body_on: '{"function": "open"}'
    body_off: '{"function": "close"}'
    is_on_template: '{{ value_json.lastaction == "open" }}'
  - platform: rest
    resource: http://watercounter/cgi-bin/wcontrol.sh?valve=cold
    name: Cold water
    body_on: '{"function": "open"}'
    body_off: '{"function": "close"}'
    is_on_template: '{{ value_json.lastaction == "open" }}'
  - platform: rest
    resource: http://watercounter/cgi-bin/wcontrol.sh?valve=toilet
    name: Toilet water
    body_on: '{"function": "open"}'
    body_off: '{"function": "close"}'
    is_on_template: '{{ value_json.lastaction == "open" }}'
